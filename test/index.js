import assert from "assert";
import { parseMarkdown } from "../src/index.js";

describe("parseMarkdown", () => {
  it("should not crash when no string", () => {
    assert.deepEqual(parseMarkdown(), []);
    assert.deepEqual(parseMarkdown(["Text", { foo: "bar" }]), [{ type: "text", value: "Text,[object Object]" }]);
  });
  it("should not return parsed phone number", () => {
    assert.deepEqual(parseMarkdown("bla bla\n\nGE69TB7916245061200010"), [
      { type: "text", value: "bla bla\n\nGE69TB7916245061200010" },
    ]);
  });
  it("should return parsed phone number", () => {
    assert.deepEqual(parseMarkdown(`Here is my number: +380976328791 and +380 44 334 1234 :)`), [
      { type: "text", value: "Here is my number: " },
      { href: "+380976328791", type: "phone", value: "+380976328791" },
      { type: "text", value: " and " },
      { href: "+380 44 334 1234", type: "phone", value: "+380 44 334 1234" },
      { type: "text", value: " :)" },
    ]);
    assert.deepEqual(
      parseMarkdown(
        `–î–µ—Ç–∞–ª—ñ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ +38 (097) 123 45 56. –£ –≤–∏–ø–∞–¥–∫—É. 25. –ú–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –∑ —Å–æ–±–æ—é –∫–æ–≥–æ –≤–≤–∞–∂–∞—î—Ç–µ –∑–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ.`,
      ),
      [
        { type: "text", value: "–î–µ—Ç–∞–ª—ñ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ " },
        { href: "+38 (097) 123 45 56", type: "phone", value: "+38 (097) 123 45 56" },
        { type: "text", value: ". –£ –≤–∏–ø–∞–¥–∫—É. 25. –ú–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –∑ —Å–æ–±–æ—é –∫–æ–≥–æ –≤–≤–∞–∂–∞—î—Ç–µ –∑–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ." },
      ],
    );
  });
  it("should return parsed email in bold text", () => {
    assert.deepEqual(parseMarkdown(`**rk@andcards.com**`), [
      { type: "bold", children: [{ href: "rk@andcards.com", type: "email", value: "rk@andcards.com" }] },
    ]);
  });
  it("should return parsed link", () => {
    assert.deepEqual(parseMarkdown(`[rich links](https://www.andcards.com/) :)`), [
      { type: "link", href: "https://www.andcards.com/", value: "rich links" },
      { type: "text", value: " :)" },
    ]);
    assert.deepEqual(parseMarkdown(`__[anchor](https://www.facebook.com)__`), [
      { children: [{ type: "link", href: "https://www.facebook.com", value: "anchor" }], type: "bold" },
    ]);
    assert.deepEqual(parseMarkdown(`~~[anchor](https://www.facebook.com)~~`), [
      { children: [{ type: "link", href: "https://www.facebook.com", value: "anchor" }], type: "strikethrough" },
    ]);
  });
  it("should return parsed image", () => {
    assert.deepEqual(parseMarkdown(`![rich links](https://www.andcards.com/) :)`), [
      { type: "image", href: "https://www.andcards.com/", value: "rich links" },
      { type: "text", value: " :)" },
    ]);
    assert.deepEqual(parseMarkdown(`![](https://www.andcards.com/) :)`), [
      { type: "image", href: "https://www.andcards.com/", value: "" },
      { type: "text", value: " :)" },
    ]);
    assert.deepEqual(parseMarkdown(`__![anchor](https://www.facebook.com)__`), [
      { children: [{ type: "image", href: "https://www.facebook.com", value: "anchor" }], type: "bold" },
    ]);
    assert.deepEqual(parseMarkdown(`~~![anchor](https://www.facebook.com)~~`), [
      { children: [{ type: "image", href: "https://www.facebook.com", value: "anchor" }], type: "strikethrough" },
    ]);
  });
  it("should return parsed hashtags and mentions", () => {
    assert.deepEqual(parseMarkdown(`#first_hash #second_hash`), [
      { type: "hashtag", hashtag: "first_hash", value: "#first_hash" },
      { type: "text", value: " " },
      { type: "hashtag", hashtag: "second_hash", value: "#second_hash" },
    ]);
    assert.deepEqual(parseMarkdown(`#first*hash #second*hash @mention*bold ~~strikethrough~~`), [
      { type: "hashtag", hashtag: "first*hash", value: "#first*hash" },
      { type: "text", value: " " },
      { type: "hashtag", hashtag: "second*hash", value: "#second*hash" },
      { type: "text", value: " " },
      { type: "mention", mention: "mention", value: "@mention" },
      { type: "text", value: "*bold " },
      {
        children: [{ type: "text", value: "strikethrough" }],
        type: "strikethrough",
      },
    ]);
    assert.deepEqual(
      parseMarkdown(
        "#residents\n–¶—ñ–∫–∞–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —Ç–∞ —á—É–¥–æ–≤–∞ –Ω–∞–≥–æ–¥–∞ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –±–ª–∏–∂—á–µ –∑ andcards: https://www.andcards.com",
      ),
      [
        { hashtag: "residents", type: "hashtag", value: "#residents" },
        {
          type: "text",
          value: "\n–¶—ñ–∫–∞–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —Ç–∞ —á—É–¥–æ–≤–∞ –Ω–∞–≥–æ–¥–∞ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –±–ª–∏–∂—á–µ –∑ andcards: ",
        },
        { href: "https://www.andcards.com", type: "link", value: "https://www.andcards.com" },
      ],
    );
  });
  it("should return parsed markdown tokens", () => {
    assert.deepEqual(
      parseMarkdown(
        "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ [–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π –°—Ç–Ω–¥–∞–ø](https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D) –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº",
      ),
      [
        {
          type: "text",
          value: "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ ",
        },
        {
          href: "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
          type: "link",
          value: "–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π –°—Ç–Ω–¥–∞–ø",
        },
        { type: "text", value: " –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº" },
      ],
    );
    assert.deepEqual(
      parseMarkdown(
        "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ ![–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π –°—Ç–Ω–¥–∞–ø](https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D) –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº",
      ),
      [
        {
          type: "text",
          value: "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ ",
        },
        {
          href: "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
          type: "image",
          value: "–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π –°—Ç–Ω–¥–∞–ø",
        },
        { type: "text", value: " –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº" },
      ],
    );
    assert.deepEqual(
      parseMarkdown(
        "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ ![](https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D) –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº",
      ),
      [
        {
          type: "text",
          value: "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ ",
        },
        {
          href: "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
          type: "image",
          value: "",
        },
        { type: "text", value: " –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº" },
      ],
    );
    assert.deepEqual(
      parseMarkdown(
        "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è #–≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ [–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π #–°—Ç–Ω–¥–∞–ø](https://www.facebook.com/events/656828768259069/?#hash) –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº",
      ),
      [
        { type: "text", value: "–í–µ—á—ñ—Ä –ø'—è—Ç–Ω–∏—Ü—ñ –¥–ª—è " },
        { hashtag: "–≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö", type: "hashtag", value: "#–≤—ñ–¥–≤–µ—Ä—Ç–∏—Ö" },
        { type: "text", value: " —Ç–µ–º —ñ –º—ñ—Ü–Ω–∏—Ö –∂–∞—Ä—Ç—ñ–≤. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –Ω–∞ " },
        { href: "https://www.facebook.com/events/656828768259069/?#hash", type: "link", value: "–ü—Ä–∏—Å—Ç–æ–π–Ω–∏–π #–°—Ç–Ω–¥–∞–ø" },
        { type: "text", value: " –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ —Ç–∏–∂–Ω—èüí™üèº" },
      ],
    );
    assert.deepEqual(parseMarkdown(`**_~~b i del~~_**`), [
      {
        children: [
          {
            children: [
              {
                children: [{ type: "text", value: "b i del" }],
                type: "strikethrough",
              },
            ],
            type: "italic",
          },
        ],
        type: "bold",
      },
    ]);
    assert.deepEqual(parseMarkdown(`**_~~strikethrough~~ & asd_**`), [
      {
        children: [
          {
            children: [
              {
                children: [{ type: "text", value: "strikethrough" }],
                type: "strikethrough",
              },
              { type: "text", value: " & asd" },
            ],
            type: "italic",
          },
        ],
        type: "bold",
      },
    ]);
    assert.deepEqual(parseMarkdown(`[**rich links**](https://www.andcards.com/) ::)`), [
      {
        type: "link",
        href: "https://www.andcards.com/",
        children: [
          {
            type: "bold",
            children: [{ type: "text", value: "rich links" }],
          },
        ],
      },
      { type: "text", value: " ::)" },
    ]);
    assert.deepEqual(
      parseMarkdown(
        `[https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D](https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D) ::)`,
      ),
      [
        {
          type: "link",
          href: "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
          value:
            "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
        },
        { type: "text", value: " ::)" },
      ],
    );
    assert.deepEqual(
      parseMarkdown(
        `[](https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D) ::)`,
      ),
      [
        {
          type: "link",
          href: "https://www.facebook.com/events/656828768259069/?acontext=%7B%22event_action_history%22%3A[%7B%22mechanism%22%3A%22search_results%22%2C%22surface%22%3A%22search%22%7D]%7D",
          value: "",
        },
        { type: "text", value: " ::)" },
      ],
    );
    assert.deepEqual(
      parseMarkdown("–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –º—ñ—Å—Ü–µ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ - https://k15.andcards.com."),
      [
        { type: "text", value: "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –º—ñ—Å—Ü–µ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ - " },
        { type: "link", href: "https://k15.andcards.com", value: "https://k15.andcards.com" },
        { type: "text", value: "." },
      ],
    );
  });
});
